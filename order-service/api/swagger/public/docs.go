// Code generated by swaggo/swag. DO NOT EDIT.

package public

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Olga Shishkina",
            "email": "olenka.shishkina.02@mail.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/createOrder": {
            "post": {
                "description": "Create a new order",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Create order",
                "operationId": "createOrder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header: 'Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "order",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New order was successfully created.",
                        "schema": {
                            "$ref": "#/definitions/models.CreateOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Not enough funds to write off / required Authorization header or 'order' parameter is missing.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deleteOrder/{orderID}": {
            "delete": {
                "description": "Deletes order by orderID.",
                "tags": [
                    "order"
                ],
                "summary": "Delete order",
                "operationId": "deleteOrder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header: 'Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "orderID in uuid format",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The order has been successfully deleted.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "The required Authorization header or 'orderID' field is missing.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getAllOrders": {
            "get": {
                "description": "Returns all orders.",
                "tags": [
                    "order"
                ],
                "summary": "Get all orders",
                "operationId": "getAllOrders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header: 'Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All orders has been successfully received.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.OrderInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required Authorization header.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getOrderByID/{orderID}": {
            "get": {
                "description": "Returns the order by order_id.",
                "tags": [
                    "order"
                ],
                "summary": "Get order",
                "operationId": "getOrderByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header: 'Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "orderID in uuid format",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user's order have been successfully received.",
                        "schema": {
                            "$ref": "#/definitions/models.OrderInfo"
                        }
                    },
                    "400": {
                        "description": "Missing required Authorization header.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getUserOrders": {
            "get": {
                "description": "Returns the user's orders.",
                "tags": [
                    "order"
                ],
                "summary": "Get user orders",
                "operationId": "getUserOrders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header: 'Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user's orders have been successfully received.",
                        "schema": {
                            "$ref": "#/definitions/models.OrderInfo"
                        }
                    },
                    "400": {
                        "description": "Missing required Authorization header.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "summary": "Check service status",
                "operationId": "health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateOrderResponse": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string",
                    "example": "3f8f0d05-0c59-4e7b-a7b6-48e0d5c11f71"
                },
                "success": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "price": {
                    "type": "integer",
                    "example": 560
                },
                "product_id": {
                    "type": "integer",
                    "example": 312
                },
                "quantity": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "models.OrderInfo": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string",
                    "example": "3f8f0d05-0c59-4e7b-a7b6-48e0d5c11f71"
                },
                "price": {
                    "type": "integer",
                    "example": 560
                },
                "product_id": {
                    "type": "integer",
                    "example": 312
                },
                "quantity": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total_cost": {
                    "type": "integer",
                    "example": 1120
                },
                "username": {
                    "type": "string",
                    "example": "Maria"
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "",
	Schemes:          []string{"http"},
	Title:            "Billing service API",
	Description:      "A service that stores information about user orders.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
