{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A service that stores information about users.",
        "title": "User service API",
        "contact": {
            "name": "Olga Shishkina",
            "email": "olenka.shishkina.02@mail.ru"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "paths": {
        "/health": {
            "get": {
                "summary": "Check service status",
                "operationId": "health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates the user.",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "operationId": "Login",
                "parameters": [
                    {
                        "description": "userAuth",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user has been successfully authenticated.",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        },
                        "headers": {
                            "Authorization": {
                                "type": "string",
                                "description": "Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required 'userAuth' parameter / token generation error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Incorrect password.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User with given username not found.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Creates a new user with given data. Checks that email and phone are in the correct format, and that the user with given username is not yet in the database, otherwise it returns the BadRequest status.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "operationId": "createUser",
                "parameters": [
                    {
                        "description": "user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "User already exists / missing required 'user' parameter / invalid format of 'email' or 'phone' parameters.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "description": "Returns information about the user with the given username.",
                "tags": [
                    "user"
                ],
                "summary": "Get user",
                "operationId": "getUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to get",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data received successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Missing required 'username' parameter.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User with given username not found.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates user data with given username.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username of the user to update",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Missing required 'username' or 'user' parameters.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User with given username not found.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the user with given username.",
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username of the user to delete.",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Missing required 'username' parameter.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User with given username not found.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/verify": {
            "post": {
                "description": "Checks authorization tokens and returns the user's login and email.",
                "tags": [
                    "auth"
                ],
                "summary": "Verify",
                "operationId": "verify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header: 'Bearer \u003caccess_token\u003e;\u003crefresh_token\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully verified.",
                        "schema": {
                            "$ref": "#/definitions/models.VerifyResponse"
                        }
                    },
                    "400": {
                        "description": "Token generation error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Missing required 'Authorization' header / tokens expired.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.GetUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "iivanov@gmail.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "Ivan"
                },
                "last_name": {
                    "type": "string",
                    "example": "Ivanov"
                },
                "phone": {
                    "type": "string",
                    "example": "+79999999999"
                },
                "username": {
                    "type": "string",
                    "example": "IvanIvanov2000"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "iivanov@gmail.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "Ivan"
                },
                "last_name": {
                    "type": "string",
                    "example": "Ivanov"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty1234"
                },
                "phone": {
                    "type": "string",
                    "example": "+79999999999"
                },
                "username": {
                    "type": "string",
                    "example": "IvanIvanov2000"
                }
            }
        },
        "models.UserAuth": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.VerifyResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        }
    }
}